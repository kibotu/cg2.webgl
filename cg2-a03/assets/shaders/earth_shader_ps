precision mediump float;

// phong material
struct PhongMaterial
{
   vec4 ambient;     // Acm
   vec4 diffuse;     // Dcm
   vec4 specular;    // Scm
   float shininess;  // Srm
};

// uniforms
uniform PhongMaterial material;

uniform sampler2D texture_01; // day and seasonal
uniform sampler2D texture_02; // night
uniform sampler2D texture_03; // clouds
uniform sampler2D texture_04; // specular
uniform sampler2D texture_05; // bump map
uniform int u_ShowClouds;
uniform vec3 u_LightIntensity;
uniform vec2 u_CloudShift;
uniform float u_CloudIntensity;

// in
varying vec3 v_Normal;
varying vec3 v_EyeDir;
varying vec3 v_LightDir;
varying vec2 v_TexCoords;
varying vec3 v_Binormal;
varying vec3 v_Tangent;

vec4 phong(vec3 n, vec3 v, vec3 s, vec3 l, vec3 ka, vec3 kd, vec3 ks, float ke) {
  if(dot(v,n) < 0.0) return vec4(0,0,0,0); // back-face
  n = normalize(n);
  v = normalize(v);
  s = normalize(s);
  // ambient
  vec3 color = ka * l;
  float cosns = dot(n, s);
  if (cosns > 0.0) {
    // diffuse
    color += (kd * l * cosns);
    // specular
    vec3 rs = 2.0 * (cosns * n) - s;
    // mix specular map with specular
    vec3 r = mix(texture2D(texture_04, v_TexCoords).rgb,rs,0.5);
    float cosrv = dot(r, v);
	// shininess
    if (cosrv > 0.0) color += ks * l * pow(cosrv, ke);
  }
  return vec4(color,1.0);
}

vec4 daynight(vec3 light_dir, vec3 normal, vec2 uv, sampler2D dayTexture, sampler2D nightTexture) {
    vec4 texel0, texel1;
    float alpha = clamp(8.0 * max(0.0, dot(light_dir,  normal)), 0.0, 1.0);
    texel0 = texture2D(nightTexture, uv);
    texel1 = texture2D(dayTexture, uv);
    return  mix(texel0, texel1, alpha);
}

vec4 addClouds(vec3 baseColor,  sampler2D cloudTexture, vec2 uv, float intensity) {
  // alpha map
  float c = texture2D(cloudTexture, uv).r;
  // mix day + cloud colors
  c = pow(c,intensity);
  return vec4((1.0-c) * baseColor + c * vec3(1,1,1),1.0);
}

vec3 bump(sampler2D bumpMap, vec2 uv, vec3 normal) {
   return normalize((texture2D(texture_05, v_TexCoords).xyz+v_Normal)* 2.0 - 1.0);
}

vec3 bump2(sampler2D bumpMap, vec2 uv, vec3 normal, vec3 tangent, vec3 binormal) {
  float BumpConstant = 0.5;
  vec3 bump = BumpConstant * (texture2D(bumpMap, uv).xyz* 2.0 - 1.0);
  vec3 bumpNormal = normal + (bump.x * tangent + bump.y * binormal);
  bumpNormal = normalize(bumpNormal);
}

void main() {
  // bump map
  vec3 n = v_Normal;
  //vec3 n = bump(texture_05, v_TexCoords, v_Normal);
  //vec3 n = bump2(texture_05, v_TexCoords, v_Normal, v_Tangent, v_Binormal);
  // day night
  vec4 texColor = daynight(v_LightDir,n,v_TexCoords,texture_01,texture_02);
  // clouds
  vec4 finalTexColor = u_ShowClouds == 1 ? addClouds(texColor.rgb, texture_03, vec2(mod(v_TexCoords.x + u_CloudShift.x,1.0), v_TexCoords.y), u_CloudIntensity) : texColor;
  // phong
  vec4 phongColor = phong(n,  v_EyeDir, v_LightDir,  u_LightIntensity, material.ambient.rgb, material.diffuse.rgb, material.specular.rgb, material.shininess);
  // mix phong and textures
  gl_FragColor = mix(finalTexColor,phongColor,0.35);
}