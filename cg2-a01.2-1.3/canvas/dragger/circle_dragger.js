/*
 * JavaScript / Canvas teaching framwork 
 * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de 
 *
 * Module: circle_dragger
 *
 * A PointDragger is a drawable object than can react to 
 * events from a SceneController. It will typically control
 * the position of one vertex/point of a scene obejct.
 *
 */


/* requireJS module definition */
define(["../../utils/util", "scene"],
    (function (Util, Scene) {

        "use strict";

        /*
         * A dragger is a visible handle to move a 2D point around
         * using the 2D rendering features of the HTML5 canvas element.
         * Parameters:
         *
         * - getPos [ function() --> [x,y] ]
         *
         *   callback function that will return the position of the dragger
         *   as an array [x,y]
         *
         * - setPos [ function(dragEvent) ]
         *
         *        a callback function that repositions the dragger according to a
         *        drag event generated by SceneController. The drag event is of the form
         *        { position: [x,y], delta: [x,y] }, where pos is the absolute position
         *        of the mouse, and delta is the difference vector pointing from
         *        the last known dragging position to the current mouse position.
         *
         * - drawStyle [Â {radius: 5, width: 2, color: "#FF00FF", fill: false} ]
         *
         *        specification object for the drawing style, example see above
         *
         * @param getRadius gets radius
         * @param setRadius sets radius
         */
        var CircleDragger = function (getPos, getRadius, setRadius, drawStyle) {

            // remember the callbacks
            this.getRadius = getRadius;
            this.setRadius = setRadius;
            this.getPos = getPos;

            // default draw style
            this.drawStyle = drawStyle || {
                width:2,
                color:"#ff0000",
                fill:false,
                visible: true
            };

            // attribute queried by SceneController to recognize draggers
            this.isDragger = true;

        };

        /*
         * draw the dragger as a small circle
         */
        CircleDragger.prototype.draw = function (context) {

            // don't draw invisible elements
            if(!this.drawStyle.visible) return;

            // what is my current position?
            var pos = this.getPos();

            // what shape to draw
            context.beginPath();
            context.arc(this.getPos[0], this.getPos[1], // position
                this.getRadius,                         // radius
                0.0, Math.PI * 2,                       // start and end angle
                true);                                  // clockwise
            context.closePath();

            // draw style
            context.lineWidth = this.drawStyle.width;
            context.strokeStyle = this.drawStyle.color;
            context.fillStyle = this.drawStyle.color;


            context.stroke();
        };

        /*
         * test whether the specified mouse position "hits" this dragger
         */
        CircleDragger.prototype.isHit = function (context, mousePos) {

            // what is my current position?
            var pos = this.getPos();
            var r = this.getRadius();

            // check whether distance between mouse and dragger's center
            // is at max (radius+1)
            var dx = mousePos[0] - pos[0];
            var dy = mousePos[1] - pos[1];
            var dt = dx * dx + dy * dy - r * r;
            var tolerance = 200;
            return  dt <= tolerance && dt >= -tolerance;
        };

        /*
         * Event handler triggered by a SceneController when mouse
         * is being dragged
         */
        CircleDragger.prototype.mouseDrag = function (dragEvent) {
            // change position of the associated original (!) object
            this.setRadius(Math.abs(dragEvent.position[0] - this.getPos()[0]));
        };

        // this module exposes only the constructor for Dragger objects
        return CircleDragger;

    })); // define
